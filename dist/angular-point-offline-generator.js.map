{"version":3,"sources":["apOfflineGeneratorController.ts","apOfflineGeneratorDirective.ts","index.ts"],"names":[],"mappings":"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","file":"angular-point-offline-generator.js","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\nmodule ap.offlineGenerator {\r\n    'use strict';\r\n\r\n    interface IControllerScope extends ng.IScope {\r\n        siteUrl: string;\r\n    }\r\n\r\n    /**\r\n     * @ngdoc function\r\n     * @name angularPoint.generateOfflineCtrl\r\n     * @description\r\n     * Allows us to view lists within a site collection and download a XML representation of the list to use offline.  Allows\r\n     * the user to set query parameters to filter the information that is returned.\r\n     * @requires angularPoint.apDataService\r\n     * @requires angularPoint.apExportService\r\n     */\r\n\r\n    export class OfflineGeneratorController {\r\n        availableListFields: IXMLFieldDefinition[] = [];\r\n        fileName = '';\r\n        itemLimit = 0;\r\n        listCollection: IXMLList[] = [];\r\n        operation: string;\r\n        operations = ['GetListItemChangesSinceToken', 'GetListItems'];\r\n        query = '';\r\n        queryOptions = [\r\n            { attr: 'IncludeMandatoryColumns', val: false },\r\n            { attr: 'IncludeAttachmentUrls', val: true },\r\n            { attr: 'IncludeAttachmentVersion', val: false },\r\n            { attr: 'ExpandUserField', val: false }\r\n        ]\r\n        selectedList: IXMLList;\r\n        selectedListFields: IXMLFieldDefinition[] = [];\r\n        siteUrl: string;\r\n        xmlResponse: string;\r\n        constructor($scope: IControllerScope, $q: ng.IQService, private apDataService: DataService,\r\n            private apExportService: ExportService, private toastr) {\r\n\r\n            var vm = this;\r\n            vm.operation = vm.operations[0];\r\n            vm.siteUrl = $scope.siteUrl;\r\n\r\n\r\n            vm.getLists();\r\n\r\n            /** Get list fields whenever the selected list changes */\r\n            $scope.$watch('vm.selectedList', function(newVal, oldVal) {\r\n                if (!newVal) return;\r\n\r\n                /** Remove spaces in name to take a guess at the name of the XML file */\r\n                vm.fileName = vm.selectedList.Title.replace(' ', '') + '.xml';\r\n\r\n                vm.lookupListFields();\r\n                console.log(newVal);\r\n            });\r\n\r\n\r\n        }\r\n\r\n        /** Get list/library definitions for the site */\r\n        getLists() {\r\n            var vm = this;\r\n            /** Ensure array is empty */\r\n            vm.listCollection.length = 0;\r\n            vm.apDataService.getCollection({\r\n                filterNode: 'List',\r\n                operation: \"GetListCollection\",\r\n                webURL: vm.siteUrl\r\n            }).then(function(dataArray) {\r\n                vm.listCollection.push.apply(vm.listCollection, dataArray);\r\n                vm.toastr.info(vm.listCollection.length + ' lists/libraries identified.');\r\n            });\r\n        }\r\n\r\n        /** Main call to query list/library and capture XML response */\r\n        getXML() {\r\n            var vm = this;\r\n            /** Empty out any previous values */\r\n            vm.xmlResponse = undefined;\r\n\r\n            var payload = {\r\n                operation: vm.operation,\r\n                listName: vm.selectedList.ID,\r\n                CAMLRowLimit: vm.itemLimit,\r\n                // offlineXML: apConfig.offlineXML + vm.fileName,\r\n                CAMLQuery: undefined,\r\n                CAMLQueryOptions: '',\r\n                CAMLViewFields: undefined,\r\n                webURL: vm.siteUrl\r\n            };\r\n\r\n            /** Build custom CAMLViewFields if anything is identified in \"Selected Fields\" */\r\n            if (vm.selectedListFields.length > 0) {\r\n                payload.CAMLViewFields = \"<ViewFields>\";\r\n                _.each(vm.selectedListFields, function(fieldName) {\r\n                    payload.CAMLViewFields += `<FieldRef Name=\"${fieldName}\" />`;\r\n                });\r\n                payload.CAMLViewFields += \"</ViewFields>\";\r\n            }\r\n\r\n            /** Add query to payload if it's supplied */\r\n            var camlQuery = stripQuery(vm.query);\r\n            if (camlQuery.length > 0) {\r\n                payload.CAMLQuery = camlQuery;\r\n            }\r\n\r\n            /** Add query options */\r\n            payload.CAMLQueryOptions = buildQueryOptions(vm.queryOptions);\r\n\r\n            /** Use service wrapper to make the query */\r\n            vm.apDataService.serviceWrapper(payload)\r\n                .then(function(response) {\r\n                    /** Update the visible XML response and allow for downloading */\r\n                    vm.xmlResponse =\r\n                    /** Get the string representation of the XML */\r\n                    (new XMLSerializer()).serializeToString(response);\r\n                });\r\n        }\r\n\r\n        /** Fetch the available fields for the selected list */\r\n        lookupListFields() {\r\n            var vm = this;\r\n            vm.availableListFields.length = 0;\r\n            vm.selectedListFields.length = 0;\r\n            if (_.isObject(vm.selectedList) && vm.selectedList.Title) {\r\n\r\n                vm.apDataService.getListFields({\r\n                    listName: vm.selectedList.Name\r\n                }).then(function(dataArray) {\r\n                    vm.availableListFields.push.apply(vm.availableListFields, dataArray);\r\n                    vm.toastr.info(vm.availableListFields.length + \" fields found.\")\r\n                });\r\n            } else {\r\n                vm.toastr.error('Please ensure a list is selected before preceding.')\r\n            }\r\n        }\r\n\r\n        /** Automatically highlight all text when the textarea is selected to\r\n        * allow for easier copy/paste. */\r\n        onTextClick($event) {\r\n            $event.target.select();\r\n        }\r\n\r\n        /** Save the XML response to the local machine */\r\n        saveXML() {\r\n            var vm = this;\r\n            vm.apExportService.saveXML(vm.xmlResponse, vm.fileName);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Generate something that looks like the following using settings from the view\r\n     * @returns {string}\r\n     * @example\r\n     * <pre>\r\n     * '<QueryOptions>' +\r\n     * '   <IncludeMandatoryColumns>FALSE</IncludeMandatoryColumns>' +\r\n     * '   <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>' +\r\n     * '   <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>' +\r\n     * '   <ExpandUserField>FALSE</ExpandUserField>' +\r\n     * '</QueryOptions>',\r\n     * </pre>\r\n     */\r\n    function buildQueryOptions(opts) {\r\n        var xml = '<QueryOptions>';\r\n        _.each(opts, function(option) {\r\n            xml += `<${option.attr}>${option.val ? 'TRUE' : 'FALSE'}</${option.attr}>`;\r\n        });\r\n        xml += '</QueryOptions>';\r\n        return xml;\r\n    }\r\n\r\n    /**\r\n     * @name stripQuery\r\n     * @description\r\n     * Allows us to paste in the query directly from a model without removing the apostrophe's or plus\r\n     * signs used.\r\n     * @param {string} str CAML query.\r\n     * @returns {string} Cleaned up string.\r\n     * @example\r\n     * <h3>The following could be directly pasted into the CAML Query textarea</h3>\r\n     * <pre>\r\n     * '<Query>' +\r\n     * '   <Where>' +\r\n     * '       <Geq>' +\r\n     * '           <FieldRef Name=\"To\"/>' +\r\n     * '           <Value Type=\"DateTime\">' +\r\n     * '               <Today OffsetDays=\"-30\"/>' +\r\n     * '           </Value>' +\r\n     * '       </Geq>' +\r\n     * '   </Where>' +\r\n     * '   <OrderBy>' +\r\n     * '       <FieldRef Name=\"From\" Ascending=\"TRUE\"/>' +\r\n     * '   </OrderBy>' +\r\n     * '</Query>'\r\n     * </pre>\r\n     */\r\n    function stripQuery(str) {\r\n        /** Remove apostrophe's */\r\n        return str.replace(/'+/g, '')\r\n        /** Remove plus signs */\r\n            .replace(/\\++/g, '');\r\n    }\r\n\r\n}","/// <reference path=\"../typings/tsd.d.ts\" />\r\n/// <reference path=\"apOfflineGeneratorController.ts\" />\r\n\r\nmodule ap.offlineGenerator {\r\n    'use strict';\r\n\r\n    /**\r\n     * @example\r\n     *    //Offline route\r\n     *    .state('offline', {\r\n     *        url: '/offline',\r\n     *        template: `<ap-offline-generator site-url=\"${apConfig.defaultUrl}\"></ap-offline-generator>`\r\n    })\r\n     */\r\n\r\n    export var OfflineGeneratorDirective = () => {\r\n        var directive = {\r\n            controller: OfflineGeneratorController,\r\n            controllerAs: 'vm',\r\n            scope: {\r\n                siteUrl: '@'\r\n            },\r\n            templateUrl: 'apOfflineGeneratorTemplate.html'\r\n        };\r\n        return directive;\r\n    }\r\n\r\n}\r\n","/// <reference path=\"../typings/tsd.d.ts\" />\r\n/// <reference path=\"apOfflineGeneratorDirective.ts\" />\r\n\r\nmodule ap.offlineGenerator {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('angularPoint')\r\n        .directive('apOfflineGenerator', OfflineGeneratorDirective);\r\n}"],"sourceRoot":"/source/"}