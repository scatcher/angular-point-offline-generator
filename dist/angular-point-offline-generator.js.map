{"version":3,"sources":["apOfflineGeneratorController.ts","apOfflineGeneratorDirective.ts","index.ts"],"names":["ap","ap.offlineGenerator","ap.offlineGenerator.OfflineGeneratorController","ap.offlineGenerator.OfflineGeneratorController.constructor","ap.offlineGenerator.OfflineGeneratorController.getLists","ap.offlineGenerator.OfflineGeneratorController.getXML","ap.offlineGenerator.OfflineGeneratorController.lookupListFields","ap.offlineGenerator.OfflineGeneratorController.onTextClick","ap.offlineGenerator.OfflineGeneratorController.saveXML","ap.offlineGenerator.buildQueryOptions","ap.offlineGenerator.stripQuery"],"mappings":"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","file":"angular-point-offline-generator.js","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\" />\n\nmodule ap.offlineGenerator {\n    'use strict';\n\n    interface IControllerScope extends ng.IScope {\n        siteUrl: string;\n    }\n\n    /**\n     * @ngdoc function\n     * @name angularPoint.generateOfflineCtrl\n     * @description\n     * Allows us to view lists within a site collection and download a XML representation of the list to use offline.  Allows\n     * the user to set query parameters to filter the information that is returned.\n     * @requires angularPoint.apDataService\n     * @requires angularPoint.apExportService\n     */\n\n    export class OfflineGeneratorController {\n        availableListFields: IXMLFieldDefinition[] = [];\n        fileName = '';\n        itemLimit = 0;\n        listCollection: IXMLList[] = [];\n        operation: string;\n        operations = ['GetListItemChangesSinceToken', 'GetListItems'];\n        query = '';\n        queryOptions = [\n            { attr: 'IncludeMandatoryColumns', val: false },\n            { attr: 'IncludeAttachmentUrls', val: true },\n            { attr: 'IncludeAttachmentVersion', val: false },\n            { attr: 'ExpandUserField', val: false }\n        ]\n        selectedList: IXMLList;\n        selectedListFields: IXMLFieldDefinition[] = [];\n        siteUrl: string;\n        xmlResponse: string;\n        constructor($scope: IControllerScope, $q: ng.IQService, private apDataService: DataService,\n            private apExportService: ExportService, private toastr) {\n\n            var vm = this;\n            vm.operation = vm.operations[0];\n            vm.siteUrl = $scope.siteUrl;\n\n\n            vm.getLists();\n\n            /** Get list fields whenever the selected list changes */\n            $scope.$watch('vm.selectedList', function(newVal, oldVal) {\n                if (!newVal) return;\n\n                /** Remove spaces in name to take a guess at the name of the XML file */\n                vm.fileName = vm.selectedList.Title.replace(' ', '') + '.xml';\n\n                vm.lookupListFields();\n                console.log(newVal);\n            });\n\n\n        }\n        \n        /** Get list/library definitions for the site */\n        getLists() {\n            var vm = this;\n            /** Ensure array is empty */\n            vm.listCollection.length = 0;\n            vm.apDataService.getCollection({\n                filterNode: 'List',\n                operation: \"GetListCollection\",\n                webURL: vm.siteUrl\n            }).then(function(dataArray) {\n                vm.listCollection.push.apply(vm.listCollection, dataArray);\n                vm.toastr.info(vm.listCollection.length + ' lists/libraries identified.');\n            });\n        }\n        \n        /** Main call to query list/library and capture XML response */\n        getXML() {\n            var vm = this;\n            /** Empty out any previous values */\n            vm.xmlResponse = undefined;\n\n            var payload = {\n                operation: vm.operation,\n                listName: vm.selectedList.ID,\n                CAMLRowLimit: vm.itemLimit,\n                // offlineXML: apConfig.offlineXML + vm.fileName,\n                CAMLQuery: undefined,\n                CAMLQueryOptions: '',\n                CAMLViewFields: undefined,\n                webURL: vm.siteUrl\n            };\n\n            /** Build custom CAMLViewFields if anything is identified in \"Selected Fields\" */\n            if (vm.selectedListFields.length > 0) {\n                payload.CAMLViewFields = \"<ViewFields>\";\n                _.each(vm.selectedListFields, function(fieldName) {\n                    payload.CAMLViewFields += `<FieldRef Name=\"${fieldName}\" />`;\n                });\n                payload.CAMLViewFields += \"</ViewFields>\";\n            }\n\n            /** Add query to payload if it's supplied */\n            var camlQuery = stripQuery(vm.query);\n            if (camlQuery.length > 0) {\n                payload.CAMLQuery = camlQuery;\n            }\n\n            /** Add query options */\n            payload.CAMLQueryOptions = buildQueryOptions(vm.queryOptions);\n\n            /** Use service wrapper to make the query */\n            vm.apDataService.serviceWrapper(payload)\n                .then(function(response) {\n                    /** Update the visible XML response and allow for downloading */\n                    vm.xmlResponse =\n                    /** Get the string representation of the XML */\n                    (new XMLSerializer()).serializeToString(response);\n                });\n        }\n        \n        /** Fetch the available fields for the selected list */\n        lookupListFields() {\n            var vm = this;\n            vm.availableListFields.length = 0;\n            vm.selectedListFields.length = 0;\n            if (_.isObject(vm.selectedList) && vm.selectedList.Title) {\n\n                vm.apDataService.getListFields({\n                    listName: vm.selectedList.Name\n                }).then(function(dataArray) {\n                    vm.availableListFields.push.apply(vm.availableListFields, dataArray);\n                    vm.toastr.info(vm.availableListFields.length + \" fields found.\")\n                });\n            } else {\n                vm.toastr.error('Please ensure a list is selected before preceding.')\n            }\n        }\n        \n        /** Automatically highlight all text when the textarea is selected to\n        * allow for easier copy/paste. */\n        onTextClick($event) {\n            $event.target.select();\n        }\n        \n        /** Save the XML response to the local machine */\n        saveXML() {\n            var vm = this;\n            vm.apExportService.saveXML(vm.xmlResponse, vm.fileName);\n        }\n\n    }\n    \n    /**\n     * Generate something that looks like the following using settings from the view\n     * @returns {string}\n     * @example\n     * <pre>\n     * '<QueryOptions>' +\n     * '   <IncludeMandatoryColumns>FALSE</IncludeMandatoryColumns>' +\n     * '   <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>' +\n     * '   <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>' +\n     * '   <ExpandUserField>FALSE</ExpandUserField>' +\n     * '</QueryOptions>',\n     * </pre>\n     */\n    function buildQueryOptions(opts) {\n        var xml = '<QueryOptions>';\n        _.each(opts, function(option) {\n            xml += `<${option.attr}>${option.val ? 'TRUE' : 'FALSE'}<${option.attr}>`;\n        });\n        xml += '</QueryOptions>';\n        return xml;\n    }\n    \n    /**\n     * @name stripQuery\n     * @description\n     * Allows us to paste in the query directly from a model without removing the apostrophe's or plus\n     * signs used.\n     * @param {string} str CAML query.\n     * @returns {string} Cleaned up string.\n     * @example\n     * <h3>The following could be directly pasted into the CAML Query textarea</h3>\n     * <pre>\n     * '<Query>' +\n     * '   <Where>' +\n     * '       <Geq>' +\n     * '           <FieldRef Name=\"To\"/>' +\n     * '           <Value Type=\"DateTime\">' +\n     * '               <Today OffsetDays=\"-30\"/>' +\n     * '           </Value>' +\n     * '       </Geq>' +\n     * '   </Where>' +\n     * '   <OrderBy>' +\n     * '       <FieldRef Name=\"From\" Ascending=\"TRUE\"/>' +\n     * '   </OrderBy>' +\n     * '</Query>'\n     * </pre>\n     */\n    function stripQuery(str) {\n        /** Remove apostrophe's */\n        return str.replace(/'+/g, '')\n        /** Remove plus signs */\n            .replace(/\\++/g, '');\n    }\n\n}","/// <reference path=\"../typings/tsd.d.ts\" />\n/// <reference path=\"apOfflineGeneratorController.ts\" />\n\nmodule ap.offlineGenerator {\n    'use strict';\n\n    /**\n     * @example\n     *    //Offline route\n     *    .state('offline', {\n     *        url: '/offline',\n     *        template: `<ap-offline-generator site-url=\"${apConfig.defaultUrl}\"></ap-offline-generator>`\n    })\n     */\n\n    export var OfflineGeneratorDirective = () => {\n        var directive = {\n            controller: OfflineGeneratorController,\n            controllerAs: 'vm',\n            scope: {\n                siteUrl: '@'\n            },\n            templateUrl: 'apOfflineGeneratorTemplate.html'\n        };\n        return directive;\n    }\n\n}\n","/// <reference path=\"../typings/tsd.d.ts\" />\n/// <reference path=\"apOfflineGeneratorDirective.ts\" />\n\nmodule ap.offlineGenerator {\n    'use strict';\n\n    angular\n        .module('angularPoint')\n        .directive('apOfflineGenerator', OfflineGeneratorDirective);\n}"],"sourceRoot":"/source/"}